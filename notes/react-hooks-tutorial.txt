REACT HOOKS TUTORIAL

# 1 - Introduction
    Prerequisites - Basics of React, functional and class components, props, state, etc.
    What are Hooks - Hooks are a new feature addition in React version 16.8 which allow you to use React features
    without having to write a class. With hooks, we can create functional components which can manage their own
    states, and also be able to "hook" into other React features.
    Why Hooks?
        - Avoid the use of `this` keyword - thus, preventing the pain in understanding how the `this` keyword works; you
        don't also need to bind event handlers; and classes in general do not minify very well, and make hot reloading
        unreliable.
        - Provides a way to reuse stateful component logic since HOC and render props pattern, while they are useful
        often forces one to restructure the code, making it harder to read.
        - Using lifecycle methods leads to grouping unrelated codes in one block of code, while related ones are
        scattered in different lifecycle methods, making complex class components become unreadable. Hooks allow you to
        group related in smaller functions, thus components can efficiently be broken to even smaller ones, when needed.
    Note that: React Hooks
        - are available in React version 16.8 or higher.
        - are completely opt in and backward compatible (no breaking changes).
        - do not work inside a class component.
        - provide a more direct API to the React concepts you already know - state, context, refs, effects, etc. Hence,
        the introduction of hooks do not replace your existing knowledge of various React concepts.
        - can be used along with class components in a React applications. Classes won't be removed from React anytime
        soon.

# 2 - useState Hook
    The first hook we'll talk about is the `useState` hook which allows us to create and manage state within functional
    components. The `useState` hook is function which accepts the initial state value amd returns an array which has
    two elements, the first is the state value and the second is a function to update the state.
        >>> const [count, setCount] = useState(0);
    It is a common convention to use array destructing to set the state variable value and the state update function.
    The naming pattern/convention widely used is `varName` for the state variable and `setVarName` for the state update
    function.
    To update the state value, the new value is passed to the state update function as argument, as in:
        >>> setCount(count + 1);
    How does it work:
        - When the component is created, the state variable is set to the value passed into `setCount()`.
        - When the state is changed (or updated), the component re-renders.
        - On re-rendering, count now takes on the new (i.e. updated) value.

    Rules of Hooks: General rules to consider when making use of any hook are:
        - Only call hooks at the top level - don't call them inside loops, conditions, or nested functions.
        - Only call hooks from React functions - and not just any regular JS function.
