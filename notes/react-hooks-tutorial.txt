REACT HOOKS TUTORIAL

# 1 - Introduction
    Prerequisites - Basics of React, functional and class components, props, state, etc.
    What are Hooks - Hooks are a new feature addition in React version 16.8 which allow you to use React features
    without having to write a class. With hooks, we can create functional components which can manage their own
    states, and also be able to "hook" into other React features.
    Why Hooks?
        - Avoid the use of `this` keyword - thus, preventing the pain in understanding how the `this` keyword works; you
        don't also need to bind event handlers; and classes in general do not minify very well, and make hot reloading
        unreliable.
        - Provides a way to reuse stateful component logic since HOC and render props pattern, while they are useful
        often forces one to restructure the code, making it harder to read.
        - Using lifecycle methods leads to grouping unrelated codes in one block of code, while related ones are
        scattered in different lifecycle methods, making complex class components become unreadable. Hooks allow you to
        group related in smaller functions, thus components can efficiently be broken to even smaller ones, when needed.
    Note that: React Hooks
        - are available in React version 16.8 or higher.
        - are completely opt in and backward compatible (no breaking changes).
        - do not work inside a class component.
        - provide a more direct API to the React concepts you already know - state, context, refs, effects, etc. Hence,
        the introduction of hooks do not replace your existing knowledge of various React concepts.
        - can be used along with class components in a React applications. Classes won't be removed from React anytime
        soon.

# 2 - useState Hook
    The first hook we'll talk about is the `useState` hook which allows us to create and manage state within functional
    components. The `useState` hook is function which accepts the initial state value amd returns an array which has
    two elements, the first is the state value and the second is a function to update the state.
        >>> const [count, setCount] = useState(0);
    It is a common convention to use array destructing to set the state variable value and the state update function.
    The naming pattern/convention widely used is `varName` for the state variable and `setVarName` for the state update
    function.
    To update the state value, the new value is passed to the state update function as argument, as in:
        >>> setCount(count + 1);
    How does it work:
        - When the component is created, the state variable is set to the value passed into `setCount()`.
        - When the state is changed (or updated), the component re-renders.
        - On re-rendering, count now takes on the new (i.e. updated) value.

    Rules of Hooks: General rules to consider when making use of any hook are:
        - Only call hooks at the top level - don't call them inside loops, conditions, or nested functions.
        - Only call hooks from React functions - and not just any regular JS function.

# 3 - useState with previous state
    A slightly different version of the state update function returned by `useState()` accepts a function argument
    instead of the updated value of the state variable. This function returns the new state value. This version should
    bse used when the new state value of a state variable depends on its previous state e.g. negating the (boolean) state value,
    or increasing count. This is because, the state update function batches multiple calls into one to enhance
    performance and may lead to UI bugs (since the state does not update as many times as it should). Passing in a
    function which returns the new state is a good approach to always ensure that the previous state is always updated
    before it is used in the next update function call.
    Syntax:
        >>> setCount(() => count + 1);

# 4 - useState with object
    Since the setter (state update) function provided by `useState()` hook overwrites the previous state value to the
    new one, the previous object is not merged with/included in the new object when the state value is an object. The
    spread operator (...) is therefore used to include the previous properties along with the newly updated one.
    For example:
        >>> const [name, setName] = useState({firstName: '', lastName: ''});
        >>> setName({firstName: 'Hello'});
            // now name becomes {firstName: 'Hello'} leaving out the `lastName` property, use this syntax instead:
            setName({...name, firstName: 'Hello'});

# 5 - useState with array
    Similarly, when an array is used as a state value, the new value added to the array is not merged/appended to the
    previous state value (array). The spread operator should be used to include the previous items before adding the new
    items.
    >>> Syntax:
        setItems([...items, newItem]);

# 6 - useEffect Hook.
        useEffect hook allows us to cause side effects without using lifecycle methods in class components. In class
    components, the lifecycle methods provide a way to "hook" into the lifecycle of the component and perform certain
    actions, as at when due. The `componentDidMount()`, `componentDidUpdate()` and `componentWillUnmount()` are suitable
    and common places to place codes which may cause side effects e.g. interacting with the DOM, or making HTTP requests.
    However, it leads to grouping unrelated codes together, just for the only reason that we want them to run when the
    component is mounted or updated. Also, if we wish to perform an action when the component is mounted and also when
    it is updated, we'd have to write (split) them in separate code blocks.
        The `useEffect` hook provides a way to cause side effects while allowing related codes to be grouped together as
    well as avoid repeating the same block of codes, hence resulting in more organised and readable code. It is
    therefore, a close (all-in-one) replacement for the `componentDidMount`, `componentDidUpdate` and
    `componentWillUnMount` lifecycle methods.

# 7 - useEffect after render
    The `useEffect` hook, like `useState` is JS function. It accepts a function as an argument - the function being the
    effect you want to make. The function contains the code you want to execute after every render (whether initial
    render or subsequent (or re-) renders).
        >>> Syntax:
            useEffect(() => {
                // effect goes here...
            });
    Since the `useEffect` is used directly in the component, you can access the props or state directly without writing
    additional code. In the coming lessons, we'll explore how we can customise the useEffect hook to only execute our
    effect when we need it to do so instead of after every render.

# 8 - Conditionally run effects
    We can run effects conditionally usually when a props or state has changed so far. To do this, useEffect provides a
    second parameter - a dependency array - the array should contain a list of props, or state variable which the
    useEffect hook should watch out for, and run the effects only when any of these items in the dependency array has
    changed.
        >>> Syntax:
            useEffect(() => {
                // code to run only when any of the dependencies changes...
            }, [dep1, dep2, dep3]);

# 9 - Run effects only once
    Much like in `componentDidMount()` lifecycle method, we may wish to run an effect only once e.g. adding event
    listeners. To replicate this in the `useEffect` hook, an empty array is passed as the dependency parameter. This
    effectively instructs React to run the effect only once on initial render.
        >>> Syntax:
            useEffect(() => {
                // code to run only once...
            }, []);

# 10 - useEffect with cleanup
    When a component is unmounted (i.e. removed from the DOM), it is necessary to cancel all subscriptions associated
    with, remove the attached event listeners, and performing other cleanup functions. This helps to avoid memory leaks
    in our applications. In class components, React provides the `componentWillUnmount()` lifecycle method to do just
    that. However, in useEffect hook, we can return a function - the cleanup function - which is called just before the
    component is unmounted.
        >>> Syntax:
            useEffect()  => {
                // effects to run...

                return () => {
                    // perform cleanup actions...
                }
            }, []);

# 11 - useEffect with incorrect dependency
    Although, useEffect is a close replacement of the lifecycle methods suitable for causing side effects i.e. the
    `componentDidMount`, `componentDidUpdate` and `componentWillUnMount` lifecycle methods, replicating your code in the
    same manner and with the same mental model used in the lifecycle methods in useEffect hook may introduce some bugs
    since there's a subtle difference on how both of them work.
    For example, let's say we want to set up an interval counter which increments a counter after some interval and
    update the UI. In class components, we set up the interval once in `componentDidMount` and clear it when the
    component unmounts in `componentWillUnMount` so that as the `count` state variable is updated, the component is
    re-rendered; each time with the updated value. To replicate this in functional components using the `useEffect` hook,
    we simply set up the interval in the hook and return a cleanup function that clears the interval and since we want
    these to run only once, we specify an empty array as a dependency - and this may lead to bugs. This is because:
        "The dependency array is not used to tell the useEffect hook when to or when not to run the effects.
        It is used to tell the useEffect hook which variables to watch for changes and then run the effects"
    Therefore, in our example, we should include the state `count` to explicitly tell React: "Hey, watch out for my
    `count` variable, and do run the effect any time it changes". This is equivalent to add the `componentDidUpdate`
    method in class component to run the effect if the count has changed so far.
    The difference is considered subtle, since React will always run the effect even if the state `count` variable is
    not explicitly included in the dependency array when the state `count` variable is being updated using the second
    version of the React i.e. the one that accepts a function argument which returns the updated state.
    However, it is important that values like `props` which are used in the effect; and we want the effect hook to watch
    out for them to be included as part of the dependency array.
    It is also recommended to write one-off functions which should run in effect hooks inside the effect hooks so that
    is clear enough which values are needed in the effect hook and therefore, consider if they should be specified in
    the dependency array.
    In addition, it is okay to have multiple `useEffect` hook in one component. This allows different block of codes to
    be grouped separately in different `useEffect` so that related code are only placed with each other. Usually, if we
    wish to run different effects associated with different state variables, we can have `useEffect` calls for each one,
    right after the state is created using the `useState` hook. For example, say we have a component which increments
    count and modifies the browser title; and also subscribes a user's friend online status to check whether they are
    online of offline. We can create the `count` state variable, have an effect update the browser title each time the
    component is rendered and another `isOnline` state variable, and an effect to subscribe to the friend's status and
    unsubscribe when the component is unmounted. This particular example has a simple code representation on the
    official React documentation @ https://reactjs.org/docs/hooks-effect.html#//dash_ref_515/Section/Tip%253A%2520Use%2520Multiple%2520Effects%2520to%2520Separate%2520Concerns/0

# 12 - Fetching data with useEffect Part 1
    A good use case of the `useEffect` hook is fetching data from API endpoints. This is done in a similar as it is done
    using the `componentDidMount` lifecycle methods. You should also pass an empty dependency array to ensure that the
    effect only runs to prevent infinite rendering loop when the state is being updated in the effect triggering the
    component to re-render which may again call the effect.
    See example @ ../hello-world/src/react-hooks-tutorial/components/DataFetching.js

# 13 - Fetching data with useEffect Part 2
    In this lesson, our focus is fetching single data from an endpoints. For example, we might want to get a single post
    from an endpoint like, www.example.com/posts/{id} where `id` is the id of the post to retrieve. We probably may have
    a `post` state variable and also a `useEffect` to make the API call. If the `id` is supplied dynamically (e.g. by
    the user via input), you should make sure the `useEffect` hook watches out for the `post` state variable so that the
    UI is updated when the `id` changes.
    See example @ ../hello-world/src/react-hooks-tutorial/components/DataFetching.js (updated)
    Tip: You should also handle network request errors properly and render and fallback or default UI as need may be.

# 14 - Fetching data with useEffect Part 3
    The purpose of this lesson is to make API request to retrieve a single data when a click event is fired using the
    `useEffect` hook. Similar to the previous lesson, the event handler sets the state value of the input which is then
    attached to the fetch URL/endpoint, when a response is returned successfully, the new state of another state
    variable managing is updated causing a re-render. As before the `useEffect` hook would depend on the state value
    attached to the fetch URL required to trigger an API call.

# 15 - useContext Hook Part 1
    As we already know, Context provides a way to pass data through the component tree without having to pass props down
    manually at every level. Prior to hooks, `React.createContext()` was used to create a context which can be provided
    and consumed in any component. Hooks brings the `useContext()`, an easier and more direct way to make use of the
    context. In the next lesson, we'll explore how to make use of the `useContext` hook.

# 16 - useContext Hook Part 2
    In this lesson, we'll briefly revise the way the Context API was used before the introduction of Hooks.
    (Refer to React JS Tutorial Lesson 38 - 40 for in-depth review on the use of Context API).
    To pass down props through the component tree, we'll follow the steps:
        - Create the context in a higher/ancestor component (e.g `App` component) using the `React.createContext()`
        method. It returns a `Context` object with two properties that are important to us: the `Provider` object and
        the `Consumer` object.
            >>> UserContext = React.createContext();
        - Provide a value for the context, using the `Provider` object. You could do this by passing it as an argument
        when the context is being created or to the "value" prop of the `Provider`. The `Provider` will wrap the
        component which is an ancestor to all (deeply nested) components which may need to consume the context value.
            >>> <UserContext.Provider value="John Doe">
                    <ComponentC/>
                </UserContext.Provider>
        - Lastly, consume the context value using the `Consumer` object and the render props pattern. In the component
        where the context value is to be consumed, a function which accepts the context value as argument and returns a
        JSX describing a UI in which the context value is used is wrapped by the `Consumer` object.
        (Tip: This is a modified form of the render props pattern)
            >>> <UserContext.Consumer>
                    {
                        username => (
                            <div>Hello, {username}</div>
                        )
                    }
                </UserContext.Consumer>
        While this solves the problem preventing us from drilling the props down through the component tree, we tend to
        write even more verbose code. If we had to consume one more contexts, we might need to nest these contexts in
        each other, which leads to lengthy, but unnecessary code. If for example, we have a ChannelContext to also
        consume, the last code would quickly evolve to something like this.
            >>> Example:
                <UserContext.Consumer>
                    {
                        username => (
                            <ChannelContext.Consumer>
                                {
                                    channel => (
                                        <div>Hello, {username} from {channel}</div>
                                    )
                                }
                            </ChannelContext>
                        )
                    }
                </UserContext.Consumer>
        (See ComponentC, ComponentE.js, ComponentF.js in the `../hello-world/src/components/` folder as well as the
        App component for a full code example).
        Now consider, if we had even more to consume, our code becomes lengthy too. That's the issue the context hook
        deals with. With the `useContext` hook we can make use of the Context API while writing better, concise codes.
        We'll see how to do just that in the next lesson.

# 17 - useContext Hook Part 3
    With useContext hook, the first two steps - creating the context via React.createContext() and using the `Provider`
    object to provide the context value remain the same. The useContext is used to simplify how the context is consumed.
    To do that, the `useContext()` function from 'react' is used which accepts the Context to consume as the value.
    The `useContext` function then returns the context value - which you can use straightaway - as easy as that.
    >>> Example:
        const username  = useContext(UserContext);
        const channel   = useContext(ChannelContext);

    (See '../hello-world/src/components/HookComponentE.js' (for the older way) as well as
    '../hello-world/src/react-hooks-tutorial/components/HookComponentE.js' (for the "hook" way)

# 18 - useReducer Hook.
    useReducer Hook is a hook that is used for state management in React. We have already seen that useState is used for
    state management; useReducer is an alternative to useState. Under the hood, the useState is built using useReducer,
    thus, we can say the useReducer is more primitive form of useState.
    Just like useState hook is related to state, useEffect to side effects, and useContext to Context API, the
    useReducer has a thing to do with reducers. Reducers, generally speaking, are functions which takes a series of
    values (e.g. an array of values), performs an action and a returns a single value. A commonly use case of reducer is
    in the Array.prototype.reduce() method. This method accepts and executes a reducer function (which you provide) on
    each element of the array, resulting in a single output value. The reducer method works with two parameters, an
    accumulator - which holds the single value accumulated so far, and the current value of iteration of the array. An
    initial value is also provided to the reduce() method to determine the initial value it should work with.
        >>> Syntax:
            const reducer = (accumulator, currentValue) => {
                // block of codes...
                return someValue;
            }
            const reducedValue = arr.reduce(reducer, initialValue);
    Understanding the concept of reducer functions helps in understanding the `useReducer` hook.
    Comparing the reduce function in JavaScript and the useReducer in React, we note the following points:
        - While reduce() is found in vanilla JavaScript, useReducer() is found in React.
        - Syntax: For reduce - array.reduce(reducer, initialValue); For useReducer - useReducer(reducer, initialState)
        - The reducer in reduce() works with an accumulator and the current item value of iterator and returns a single
        value, while that of useReducer takes in the current state and action and returns the new state.
            >>> Syntax:
                singleValue = reducer(accumulator, itemValue)       // reduce()
                newState = reducer(currentState, action)            // useReducer()
        - The reduce() method returns a single value, while the `useReducer()` returns a pair of values - the new state
        and a dispatch.
    To sum up, the `useReducer()` hook changes the state using a `reducer` function.
    In the next couple of lessons, we'll explore how to as well as when to make use of `useReducer` hooks.






