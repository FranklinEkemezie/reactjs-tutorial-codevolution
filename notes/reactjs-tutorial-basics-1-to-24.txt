REACTJS TUTORIAL (BASICS) #1 to #24

# 1 - Introduction
    React is an open source JS library for building on user interfaces.
    ## Why Learn React?
        - Created, used and maintained by Facebook. Thus, it is going to stay for a long time.
        - It has a huge community
        - In demand
    ## Features or Characteristics
        - React has a component based architecture - allows you to break down your website into small components which
        compose the entire page.
        - It allows developers to write reusable code.
        - React is also declarative - say what you want and React builds the actual UI in its own way (the opposite
        paradigm is imperative).
        - With a good knowledge of React, you can explore the field of mobile application (React Native)
    ## Prerequisites
        - HTML, CSS; and
        - JavaScript fundamentals - this, filter, map, reduce.
        - ES6 - let & const, arrow functions, template literals, default parameters, object literals,
        rest and spread operators, and destructuring assignment.
    ## Course Content
        - Fundamentals
        - HTTP
        - Routing
        - Redux
        - Utilities

# 2 - Hello World
    To run your very first React application, you need:
    - Node.js
    - Text editor - VSCode

    You can create a React app using the command line tool - create react app (CRA):
    Run
        >>> npx create-react-app <name of project>
    To run the command:
    - Navigate to the project directory
        >>> cd <name of project>
    - Run the command to start the application:
        >>> npm start
    Another similar method to create a React app is by installing the create-react-app globally and then running it:
        >>> npm install create-react-app -g
            create-react-app <project_name>

# 3 - Folder Structure
    # The following files and folder can be found in a typical React application:
    - node_modules/ - contains the packages used by React
    - public/ - contains files or assets meant to be displayed to the public. Common files in it include:
        - index.html - The only HTML file in a React app. It has a <div> element with id="root" which allows React
        to dynamically change the view
        - manifest.json - contains info about the React app usually used in PWAs
        - Others are: robots.txt, favicon.ico, etc.
    - src/ - contains the source code for the React components. Files found in it include:
        - index.js - this is included in the index.html and is the starting point of the React app. It selects the
        "root" element and injects the UI HTML into it.
        - App.js - this file contains the root app component: the App component. All other components are found in it.
        - App.css - stylesheets for App.js component.
        - index.css - stylesheets for index.js component.
    - .gitignore - tells Git which files/folders to not track. This is important to prevent pushing the node_modules.
    - package.json - contains all the package list required and scripts required to run the React application.
    - package-lock.json - contains information about the packages used as well the specific version to "lock in" the
    application with that version
    - README.md - a README file with some information on how to get started with the React app
    # How the React runs:
        - The index.js includes in the index.html grabs (or selects) the DOM "root" HTML element.
        - The index.js, then renders the App component in the App.css
        - The App component in turn renders other components.
        That is: Your components -> App component -> index.js -> index.html

# 4  - Components
    A React component is basically a part of the React application. Components are reusable and can be modified to
    display different information. A component is placed in a JavaScript file named as PascalCaseComponent.js.
    Basically, components can be said to be in two category:
    - stateless functional component - they are the usual JS functions returning HTML (or JSX as we shall soon see).
    - stateful class component - they are the usual JS classes extending the Component class (imported from 'react')
     with a render() method.

# 5 - Functional Components
    A functional component is basically a JavaScript function which accepts an optional input - the properties of the
    components (known as 'props') and returns an HTML element (or JSX).
    To create a functional component:
        - Create a JS file with the appropriate name in PascalCase. The name of the file must be the same as the name
        of the component.
        - Write a typical JS function and return plain HTML of your choice. You don't need to put the HTML in strings.
        It must be plain HTML (which in this case is known as JSX). You can use arrow function to shorten it if the
        function body is not long. You also need to import React from 'react' to write JSX.
        - Next, export your component. You can use default export or named export:
            - Default export - using `export default MyComponentName` which exports that component by default. Thus,
            whenever, the file is imported, the component is the one imported by default. Therefore, you can import it
            with another name since it is the default component that the file will give you.
            - Named export - using:
                `export function MyComponentName () { ... }` or
                `export const MyComponentName = () => ...`
            when defining the function which exports that particular component by its name. It must, therefore,
            be imported using the exact name.

# 6 - Class Components
    A class component is basically a JS class with a constructor that can accept an optional input - the properties of
    the components (known as 'props') and has a `render` method which returns an HTML (or JSX) element. Class components
    can by itself maintain an internal state which can by itself be used to update the component.
    To create a class component:
        - Creat a JS file with the appropriate name in PascalCase. The name of the file must be the same as the name of
        the component.
        - Write a typical JS class with a render() method and return plain HTML of your choice.
        - Next, export the class component
        - And, then import in the file where you wish to use it.
    ## Functional Component vs. Class Components:
    Functional Component
        - Functional component are simple functions. Use them as much as possible over class component
        - Absence of the `this` keyword makes them easier to work with.
        - Encourages one to solve a problem without state.
        - Mainly responsible for the UI, hence called stateless, dumb or presentational components.
    Class Component
        - Class component are simple classes. They are more feature rich and maintain their private data - state.
        - Involves complex UI logic; including the use of the `this` keyword
        - Provides lifecycle hooks to perform certain action during the lifecycle of the component
        - Being able to maintain states, they are usually referred to as stateful, smart or container component.

# 7 - Hooks Update
    As part of the release of React 16.7.0-alpha, hooks were introduced - a cool new feature that lets you use state
    and other React features without writing a class. Since we can use and manage state in functional components, we
    can no longer consider them as being totally stateless.
    Hooks are an important feature and encourages React developers to use functional components more over class
    components.
    We'll learn about hooks in an upcoming video.

# 8 - JSX.
    JSX - JavaScript XML - is an extension to the JavaScript syntax that allows you to write XML-like code for elements
    adn components. JSX tags like HTML and XML tags have a tag name, attributes, and children. Although it is not
    required to write React application, it makes your code simpler and elegant.
    React provides a createElement() method which allows us to create element. It takes minimum of three arguments:
    - the name of the element - div, input, etc.
    - the properties of the element - an object containing the attributes of the elements
    - and the children of the elements.
    With the help of JSX, we can avoid writing the React.createElement() method all over for each element we want. We
    just have the specify the XML layout of the component; and it is handled automatically for you.
    So, we can say that JSX is a syntactic sugar for React.createElement().
    ## Common differences in JSX from regular HTML are:
    - class -> className
    - for -> htmlFor
    -> camelCase property naming convention:
        - onclick -> onClick
        - tabindex -> tabIndex

# 9 - Props.
    Props - short for properties - is the optional input a component can accept. It helps a component reusable and more
    importantly dynamic. They are used to pass down data from one component to the component making use of that data.
    To specify a property value, it is set as an attribute (as in <Hello name="John" />) and then retrieved via the
    optional parameter - props (as in props.name). One reserved property is the children property accessed as
    `props.children` which holds the item passed in between the XML tags of the component. If the XML tag for the
    component is self-closing i.e. nothing is passed, `props.children` return null and nothing is rendered.
    For class component, props are accessed via `this.props`.
    One important rule of props are that: Props are IMMUTABLE i.e. their values cannot be changed (or they are readonly).
    Assigning a value to name (as in props.name) results in an error.

# 10 - State.
    State is another way to decide what is rendered on the screen aside from props. Compared to props, state:
        - is managed within the component; while props is passed to the component.
        Take state as a function's local variable and props as function parameter.
        - can be changed; while props are immutable.
        - accessed via `useState` hook (in Functional components) or `this.state` (in class component); while props
        can be accessed via `props` (in Functional components) or `this.props` (class components).
    To change a state in class component, the `setState()` method is used. It accepts the new state object as argument.
    The concept of state is essential in any React application and are useful in handling events, and performing
    certain client-side action.

# 11 - setState.
    `this.setState()` is a method which allow us to modify the state variable of a component.
    Here a few things to know about the `this.setState()` method:
        - Although one can modify the state directly via `this.state`, it is not advisable as the state is changed but
        the component UI is not updated.
        `this.setState()` changes the state and tells React to re-render the component to update it.
        - Also, calls to `this.setState()` are ASYNCHRONOUS in nature. Codes after it may therefore run even before the
        state is modified. We might want to run some code immediately after the state is modified and this can be done
        by passing the chunk of code as a callback function to the second parameter of the `this.setState` method.
        - Additionally, React may group multiple `this.setState()` calls into one for performance and optimisation. The
        downside of this is that if new state depends on the previous state, the change will not be reflected in the
        next call. Therefore, whenever the new state depends on the old state, you are advised to pass a callback
        instead of the new state object. The callback should then return the new state. The previous state can be
        referenced as the first parameter of the callback and the second parameter of the callback is the `props`.

# 12 - Destructing props and state.
    Destructuring is an ES6 feature that makes it possible to unpack elements of an array or the properties of an
    object into distinct variables.
    Syntax:
    >>> const {name, age) = person;         // assuming person = {name: 'Some name', age: 34, city: 'Some city'}
    >>> const [count, step] = getNext();    // assuming getNext() returns [4, 3, true];
    Destructuring improves code readability and hence, commonly used in React application especially in destructing
    properties of a `props` or `state` variables.

# 13 - Event Handling
    When a user interacts with your application, certain events are fired. Common browser event include: mouse click,
    mouse hover, key press (up or down), input change, focus, load, etc. We may wish to run some codes when a particular
    event is fired (i.e. handle the event), we can do so using the event name (in camelCase) as attribute name and the
    event handler (a callback function) as the attribute value.

# 14 - Binding Event Handlers
    Binding Event Handlers is a direct consequence of how the `this` keyword works in JavaScript. When a method of
    class component is used as the event handler, `this` becomes `undefined` and accessing the state or props, or
    updating the state via any of `this.state`, `this.setState()`, `this.props` results in an error.
    There are a couple of ways to resolve this issue:
    - Bind the `this` keyword in the `render()` method: We can bind the `this` in the event handler to the
    class component using the `bind()` method of a function.
    Example:
        >>> <button onClick={this.clickHandler.bind(this)}>Click Me</button>
    - Passing an arrow function as the event handler which then calls the actual event handler
    Example:
        >>> <button onClick={() => this.clickHandler()}>Click Me</button>
    - Binding the event handler in the `constructor()` (not in the `render()` method.
    Example:
        >>> constructor(props) {
            super(props);

            // ...

            this.clickHandler = this.clickHandler.bind(this);

            // ...
        }
    Tip: The last method is the most commonly used method since it is more efficient and performant since the first two
     methods create a new function each time (the first, binding the `this` to provided argument and the second
     creating a new arrow function) the UI is re-rendered while the binding happens once in the constructor.
     It is also the official way to bind event handlers used in the React documentation.
     - Another method is to use arrow function instead when declaring the event handler, and you won't have to worry
     about binding the event handler to the class component.

# 15 - Methods as `props`
    We can pass methods from a parent component to a child component as props so that we can pass data from the child
    back to the parent. When the child receives the method via props, it supplies the argument needed for the method's
    parameter which is then sent back to the parent when called. This allows data to be passed from the child upwards
    to the parent component.

# 16 - Conditional Rendering.
    Conditional rendering is simply rendering JSX when a certain condition is passed. There are four common ways of
    rendering JSX conditionally and these are purely JavaScript syntax (and not React):
    - if/else:
        >>> if (condition) {
            return (
                // JSX goes here
            )
        } else {
            return (
                // Another JSX goes here
            )
        }
    - element variables:
        >>> let element;
        if (condition) {
            element = (
                // Some JSX...
            )
        } else {
            element = (
                // Some other JSX...
            )
        }

        return element;
    - ternary conditional operator:
        >>> return condition ? (
            // Some JSX...
        ) : (
            // Some other JSX...
        )
    - short circuit: render JSX or show nothing
        >>> return condition && (
            // JSX goes here...
        )
    Tip: In any of the four cases, the parentheses can be omitted if the JSX is one line.
    Also, the third and the fourth are the most commonly used ones as they are concise and more readable.

# 17 - List Rendering.
    Rendering a list of items is a very common scenarios in building applications. JS array methods, especially the
    Array.map() are very useful in list rendering.
    It is a common convention for a component rendering the list to be in charge of that single job - which is,
    rendering the list. The items of the list being rendered may be passed down to another component which is
    responsible for rendering the individual UI of the list item.
    More importantly, each list item being rendered in a list is expected to have a unique "key" prop. This helps in
    optimization and efficient rendering as we will see in the next lesson. This is the reason why rendering a
    list - something which may seem trivial - is somehow a big deal in React applications.

# 18 - Lists and Keys
    React expects you to pass a unique "key" prop when rendering the item of a list. It could be any value - id, name,
    phone_no - or anything that is unique across the list. This helps React to know which list item have changed so far,
    or added, updated or deleted during rendering and helps in efficient UI rendering. When rendering a list which has
    changed again, React compares the keys and renders the new or modified ones jumping the other list items.
    - The "key" prop is not accessible in the `props` object and React gives a warning while returning `undefined` when
    you try to access `props.key` in the child component. To access the "key" prop, you have to pass it as a separate
    props, if need be.
    - It is not also advisable to use the index of an array item as the unique "key" props since it is not stable and
    may result in unpredictable results during rendering.

# 19 - Index as Key - Anti-pattern.
    Using index as key results in undesired behaviour hence it is considered 'anti-pattern'. This is because indexes are
    not "stable" - in the sense that when a new item is added, the index re-arranges starting from 0 to the last index:
    `array.length -1`. Therefore, each item ends up not having a unique "key" when next they are about to be re-rendered.
    You can however use index as key, when:
    - the items in your list do not have a unique id - if they do, you should make use of it.
    - the list is static and do not change - no addition or removal.
    - the list will never be re-ordered or filtered.
    Another workaround is to:
    - use one of the npm packages to generate a unique IDs for the items of the list; or
    - hash each list item or one or more of its properties to generate a unique key.
    Using index as key should always be your last resort, as even React uses that when you don't specify it, although it
    gives a warning.
