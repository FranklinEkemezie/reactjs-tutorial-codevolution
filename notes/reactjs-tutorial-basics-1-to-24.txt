REACTJS TUTORIAL (BASICS) #1 to #24

# 1 - Introduction
    React is an open source JS library for building on user interfaces.
    ## Why Learn React?
        - Created, used and maintained by Facebook. Thus, it is going to stay for a long time.
        - It has a huge community
        - In demand
    ## Features or Characteristics
        - React has a component based architecture - allows you to break down your website into small components which
        compose the entire page.
        - It allows developers to write reusable code.
        - React is also declarative - say what you want and React builds the actual UI in its own way (the opposite
        paradigm is imperative).
        - With a good knowledge of React, you can explore the field of mobile application (React Native)
    ## Prerequisites
        - HTML, CSS; and
        - JavaScript fundamentals - this, filter, map, reduce.
        - ES6 - let & const, arrow functions, template literals, default parameters, object literals,
        rest and spread operators, and destructuring assignment.
    ## Course Content
        - Fundamentals
        - HTTP
        - Routing
        - Redux
        - Utilities

# 2 - Hello World
    To run your very first React application, you need:
    - Node.js
    - Text editor - VSCode

    You can create a React app using the command line tool - create react app (CRA):
    Run
        >>> npx create-react-app <name of project>
    To run the command:
    - Navigate to the project directory
        >>> cd <name of project>
    - Run the command to start the application:
        >>> npm start
    Another similar method to create a React app is by installing the create-react-app globally and then running it:
        >>> npm install create-react-app -g
            create-react-app <project_name>

# 3 - Folder Structure
    # The following files and folder can be found in a typical React application:
    - node_modules/ - contains the packages used by React
    - public/ - contains files or assets meant to be displayed to the public. Common files in it include:
        - index.html - The only HTML file in a React app. It has a <div> element with id="root" which allows React
        to dynamically change the view
        - manifest.json - contains info about the React app usually used in PWAs
        - Others are: robots.txt, favicon.ico, etc.
    - src/ - contains the source code for the React components. Files found in it include:
        - index.js - this is included in the index.html and is the starting point of the React app. It selects the
        "root" element and injects the UI HTML into it.
        - App.js - this file contains the root app component: the App component. All other components are found in it.
        - App.css - stylesheets for App.js component.
        - index.css - stylesheets for index.js component.
    - .gitignore - tells Git which files/folders to not track. This is important to prevent pushing the node_modules.
    - package.json - contains all the package list required and scripts required to run the React application.
    - package-lock.json - contains information about the packages used as well the specific version to "lock in" the
    application with that version
    - README.md - a README file with some information on how to get started with the React app
    # How the React runs:
        - The index.js includes in the index.html grabs (or selects) the DOM "root" HTML element.
        - The index.js, then renders the App component in the App.css
        - The App component in turn renders other components.
        That is: Your components -> App component -> index.js -> index.html

# 4  - Components
    A React component is basically a part of the React application. Components are reusable and can be modified to
    display different information. A component is placed in a JavaScript file named as PascalCaseComponent.js.
    Basically, components can be said to be in two category:
    - stateless functional component - they are the usual JS functions returning HTML (or JSX as we shall soon see).
    - stateful class component - they are the usual JS classes extending the Component class (imported from 'react')
     with a render() method.

# 5 - Functional Components
    A functional component is basically a JavaScript function which accepts an optional input - the properties of the
    components (known as 'props') and returns an HTML element (or JSX).
    To create a functional component:
        - Create a JS file with the appropriate name in PascalCase. The name of the file must be the same as the name
        of the component.
        - Write a typical JS function and return plain HTML of your choice. You don't need to put the HTML in strings.
        It must be plain HTML (which in this case is known as JSX). You can use arrow function to shorten it if the
        function body is not long. You also need to import React from 'react' to write JSX.
        - Next, export your component. You can use default export or named export:
            - Default export - using `export default MyComponentName` which exports that component by default. Thus,
            whenever, the file is imported, the component is the one imported by default. Therefore, you can import it
            with another name since it is the default component that the file will give you.
            - Named export - using:
                `export function MyComponentName () { ... }` or
                `export const MyComponentName = () => ...`
            when defining the function which exports that particular component by its name. It must, therefore,
            be imported using the exact name.

# 6 - Class Components
    A class component is basically a JS class with a constructor that can accept an optional input - the properties of
    the components (known as 'props') and has a `render` method which returns an HTML (or JSX) element. Class components
    can by itself maintain an internal state which can by itself be used to update the component.
    To create a class component:
        - Creat a JS file with the appropriate name in PascalCase. The name of the file must be the same as the name of
        the component.
        - Write a typical JS class with a render() method and return plain HTML of your choice.
        - Next, export the class component
        - And, then import in the file where you wish to use it.
    ## Functional Component vs. Class Components:
    Functional Component
        - Functional component are simple functions. Use them as much as possible over class component
        - Absence of the `this` keyword makes them easier to work with.
        - Encourages one to solve a problem without state.
        - Mainly responsible for the UI, hence called stateless, dumb or presentational components.
    Class Component
        - Class component are simple classes. They are more feature rich and maintain their private data - state.
        - Involves complex UI logic; including the use of the `this` keyword
        - Provides lifecycle hooks to perform certain action during the lifecycle of the component
        - Being able to maintain states, they are usually referred to as stateful, smart or container component.

# 7 - Hooks Update
    As part of the release of React 16.7.0-alpha, hooks were introduced - a cool new feature that lets you use state
    and other React features without writing a class. Since we can use and manage state in functional components, we
    can no longer consider them as being totally stateless.
    Hooks are an important feature and encourages React developers to use functional components more over class
    components.
    We'll learn about hooks in an upcoming video.

# 8 - JSX.
    JSX - JavaScript XML - is an extension to the JavaScript syntax that allows you to write XML-like code for elements
    adn components. JSX tags like HTML and XML tags have a tag name, attributes, and children. Although it is not
    required to write React application, it makes your code simpler and elegant.
    React provides a createElement() method which allows us to create element. It takes minimum of three arguments:
    - the name of the element - div, input, etc.
    - the properties of the element - an object containing the attributes of the elements
    - and the children of the elements.
    With the help of JSX, we can avoid writing the React.createElement() method all over for each element we want. We
    just have the specify the XML layout of the component; and it is handled automatically for you.
    So, we can say that JSX is a syntactic sugar for React.createElement().
    ## Common differences in JSX from regular HTML are:
    - class -> className
    - for -> htmlFor
    -> camelCase property naming convention:
        - onclick -> onClick
        - tabindex -> tabIndex
